/*
                    License stuff
----------------------------------------------------------
Copyright 2013 Joris Rehm

Licensed under the Apache License, Version 2.0.
Licensed under The MIT License.

See joined files "LICENSE-APACHE" and "LICENSE-MIT".
----------------------------------------------------------
*/


/* ----------------------------------------------------------- */

struct FunctionalTable<C> {
  priv name : ~str,
  priv map : ~std::hashmap::HashMap<Entity, C> 
}

impl<C : ToStr> FunctionalTable<C> {

  fn new(name : ~str) -> FunctionalTable<C>{
    info!(format!("create_table name={}",name));
    FunctionalTable{
      name : name,
      map : ~std::hashmap::HashMap::new()
    }
  }
  
  fn set(&mut self, e : Entity, v : C) {
    info!(format!("set id={} cmpt={} val={}", e, self.name, v.to_str() ));
    self.map.swap(e,v);
  }
  
  /* fail if the entity e does not have a component */
  fn get<'a>(&'a self, e : Entity) -> &'a C {
    self.map.get(&e)
  }

  /* TODO create an own iterator type (or re-use some trait) */
  fn iter<'a>(&'a self) -> std::hashmap::HashMapIterator<'a, Entity, C> {
    self.map.iter()
  }
  
}

#[test]
fn test_FunctionalTable(){
  let mut table : FunctionalTable<Vec> = FunctionalTable::new(~"test");
  let vec = Vec(12., 56., 3.);
  let e1 = 42;
  table.set(e1,vec);
  assert!( vec == *table.get(e1) );
}


/* ----------------------------------------------------------- */


/* We need a type for the entities, which is just an identifier. */
type Entity = uint;

/* Let's defining a data structure for managing our ECS. */
struct Manager {
  /* There is a data to remember the numbers of created entities. */
  priv entities_numbers : uint
}

impl Manager {
  /* Inializing an empty ECS */ 
  fn new() -> ~Manager {
    ~Manager {
      entities_numbers : 0
    }
  }
  
  /* Creating an new entity is just taking a unused id. */
  fn new_entity(&mut self) -> Entity {
    let res = self.entities_numbers;
    self.entities_numbers = self.entities_numbers + 1;
    info!(format!("create_entity id={}", res));
    res
  }
  
  /* TODO: how to manage the deletion of entities ?
     It depend if we iterate on entity id or on component tables.
     Maybe it's enought to delete the associated components.*/

} /* impl Manager */


#[test]
fn test_entity_management() {
  let mut mng = Manager::new();
  let e1 = mng.new_entity();
  assert!( e1 == 0 );
  let e2 = mng.new_entity();
  assert!( e2 == 1 );
}


/* ----------------------------------------------------------- */


/* We're using double size float */
type MyFloat = f64;

/* Simple vector type for 3D position */
#[deriving(Eq)]
struct Vec(MyFloat, MyFloat, MyFloat);

impl ToStr for Vec {
  fn to_str(&self) -> ~str {
    let &Vec(x,y,z) = self;
    format!("({},{},{})", x, y, z)
  }
}


/* ----------------------------------------------------------- */


// TODO use a trait
fn add_vector(a : Vec, b : Vec) -> Vec {
  let Vec(ax, ay, az) = a;
  let Vec(bx, by, bz) = b;
  Vec(bx+ax, by+ay, bz+az)
}

fn main(){
  let mut mng = Manager::new();
  let mut table_position = FunctionalTable::new(~"position");
  let mut table_velocity = FunctionalTable::new(~"velocity");
  let zero = Vec(0., 0., 0.);
  let vec_1x = Vec(1.,0.,0.);
  
  // TODO I'm not very happy to use lambda only for
  // accessing the data.
  let create_entity_at_origin = || {
    let e = mng.new_entity();
    table_position.set(e, zero);
    e
  };
  
  /* Move all the entities with a velocity.
   Having a velocity imply having a position! */
  let move_object = || {
    for (&e,&vel) in table_velocity.iter() {
      let &pos = table_position.get(e);
      let new_pos = add_vector(vel, pos);
      table_position.set(e, new_pos);
    }
  };
    
  
  let entity1 : Entity = create_entity_at_origin();
  table_velocity.set(entity1,vec_1x);
  
  for cycle in range(1u, 11) {
    println!("start_cycle {}",cycle);
    move_object();
  }
  
}
